{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emman\\\\OneDrive\\\\Documents\\\\reacttsx\\\\React-TS-login-using-jwt\\\\src\\\\context\\\\dashtabla\\\\UserUpdateContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// UsersTableContext.tsx\nimport React, { createContext, useContext, useState } from \"react\";\n// Asegúrate de importar o definir correctamente Usuario\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersUpdateContext = /*#__PURE__*/createContext(undefined);\nexport const useUsersUpdate = () => {\n  _s();\n  const context = useContext(UsersUpdateContext);\n  if (!context) {\n    throw new Error(\"useUsersTable debe ser usado dentro de UsersTableProvider\");\n  }\n  return context;\n};\n_s(useUsersUpdate, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const UsersUpdateProvider = ({\n  children\n}) => {\n  _s2();\n  const [usuarios, setUsuarios] = useState([]);\n  const actualizarUsuario = async usuarioActualizado => {\n    try {\n      const response = await fetch(`/api/usuarios/actualizar`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(usuarioActualizado)\n      });\n      if (!response.ok) {\n        throw new Error(\"Error al actualizar el usuario\");\n      }\n      const updatedUsuario = await response.json();\n      setUsuarios(prevUsuarios => prevUsuarios.map(usuario => usuario.nombre === updatedUsuario.nombre ? updatedUsuario : usuario));\n    } catch (error) {\n      console.error(\"Error al actualizar el usuario\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UsersUpdateContext.Provider, {\n    value: {\n      usuarios,\n      actualizarUsuario\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s2(UsersUpdateProvider, \"+0T6lW8CaKB88aVhCIZZdYGTATo=\");\n_c = UsersUpdateProvider;\nvar _c;\n$RefreshReg$(_c, \"UsersUpdateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","UsersUpdateContext","undefined","useUsersUpdate","_s","context","Error","UsersUpdateProvider","children","_s2","usuarios","setUsuarios","actualizarUsuario","usuarioActualizado","response","fetch","method","headers","body","JSON","stringify","ok","updatedUsuario","json","prevUsuarios","map","usuario","nombre","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/emman/OneDrive/Documents/reacttsx/React-TS-login-using-jwt/src/context/dashtabla/UserUpdateContext.tsx"],"sourcesContent":["// UsersTableContext.tsx\r\nimport React, { createContext, useContext, useState, ReactNode } from \"react\";\r\nimport { Usuario } from \"./UsersTableContext\"; // Asegúrate de importar o definir correctamente Usuario\r\n\r\ninterface UsersUpdateContextProps {\r\n  usuarios: Usuario[];\r\n  actualizarUsuario: (usuarioActualizado: Usuario) => Promise<void>;\r\n}\r\n\r\nconst UsersUpdateContext = createContext<UsersUpdateContextProps | undefined>(undefined);\r\n\r\nexport const useUsersUpdate = () => {\r\n  const context = useContext(UsersUpdateContext);\r\n  if (!context) {\r\n    throw new Error(\"useUsersTable debe ser usado dentro de UsersTableProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const UsersUpdateProvider = ({ children }: { children: ReactNode }) => {\r\n  const [usuarios, setUsuarios] = useState<Usuario[]>([]);\r\n\r\n  const actualizarUsuario = async (usuarioActualizado: Usuario) => {\r\n    try {\r\n      const response = await fetch(`/api/usuarios/actualizar`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(usuarioActualizado),\r\n      });              \r\n      \r\n      if (!response.ok) {\r\n        throw new Error(\"Error al actualizar el usuario\");\r\n      }\r\n\r\n      const updatedUsuario = await response.json();\r\n\r\n      setUsuarios((prevUsuarios) =>\r\n        prevUsuarios.map((usuario) =>\r\n          usuario.nombre === updatedUsuario.nombre ? updatedUsuario : usuario\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error al actualizar el usuario\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UsersUpdateContext.Provider value={{ usuarios, actualizarUsuario }}>\r\n      {children}\r\n    </UsersUpdateContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAC9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAO/C,MAAMC,kBAAkB,gBAAGL,aAAa,CAAsCM,SAAS,CAAC;AAExF,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,OAAO,GAAGR,UAAU,CAACI,kBAAkB,CAAC;EAC9C,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,2DAA2D,CAAC;EAC9E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,cAAc;AAQ3B,OAAO,MAAMI,mBAAmB,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,GAAA;EAC5E,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAY,EAAE,CAAC;EAEvD,MAAMc,iBAAiB,GAAG,MAAOC,kBAA2B,IAAK;IAC/D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,0BAAyB,EAAE;QACvDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,kBAAkB;MACzC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIf,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,MAAMgB,cAAc,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAE5CZ,WAAW,CAAEa,YAAY,IACvBA,YAAY,CAACC,GAAG,CAAEC,OAAO,IACvBA,OAAO,CAACC,MAAM,KAAKL,cAAc,CAACK,MAAM,GAAGL,cAAc,GAAGI,OAC9D,CACF,CAAC;IACH,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAED,oBACE5B,OAAA,CAACC,kBAAkB,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAErB,QAAQ;MAAEE;IAAkB,CAAE;IAAAJ,QAAA,EACjEA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC,CAAC;AAAC1B,GAAA,CAlCWF,mBAAmB;AAAA6B,EAAA,GAAnB7B,mBAAmB;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}